version: '3.1'

services:
  # 使用 mysql 作为后端数据库
  db:
    image: mysql:5.7
    container_name: devopschina_db
    restart: always
    volumes:
      # 用本地当前路径 sql 目录中的 sql dump文件初始化 MySQL 数据库
      - ./sql:/docker-entrypoint-initdb.d/
    environment:
      # 用这些环境变量初始化 mysql 数据库，创建目标数据库，创建用户和密码，为 root 用户初始化随机密码
      MYSQL_DATABASE: "${DB}"
      MYSQL_USER: "${DBU}"
      MYSQL_PASSWORD: "${DBP}"
      MYSQL_RANDOM_ROOT_PASSWORD: "1"
  # PHPMyAdmin 数据库管理工具，只用于开发或者测试环境
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: devopschina_myphpadmin
    restart: always
    environment:
      PMA_HOST: "${DBH}"
      PMA_USER: "${DBU}"
      PMA_PASSWORD: "${DBP}"
      PMA_ARBITRARY: "1"
    ports:
      - 9999:80
  # 使用 drupal 官方镜像 v9 ，指定 php 版本为 7.4
  drupal:
    #image: drupal:9-php7.4-apache
    build: .
    container_name: devopschina_drupal
    restart: always
    ports:
      - 9998:80
    working_dir: /opt
    volumes:
# 将当前项目目录加载到容器中，这里产生了一个和本机的依赖，后续优化：通过 Dockerfile 的复制当前开发目录中的成功到容器中
# The 'z' option tells Docker that the volume content will be shared between containers. Docker will label the content with a shared content label. Shared volumes labels allow all containers to read/write content. The 'Z' option tells Docker to label the content with a private unshared label.
      - .:/opt:z
    environment:
      HOST: "${DBH}"
      DBASE: "${DB}"
      USER: "${DBU}"
      PASS: "${DBP}"
# composer update 操作确保容器中的 Drupal 服务运行与当前的最新状态，这个操作也应该后续移植到Dockerfile 文件中
    command: bash -c "composer update && rm /var/www/html && ln -s /opt/web /var/www/html && /usr/local/bin/apache2-foreground"